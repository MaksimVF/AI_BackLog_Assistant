



import os
from crewai import Crew, Task
from agents.input_classifier_agent import input_classifier_agent
from agents.modality_detector_agent import modality_detector_agent
from agents.text_processor_agent import text_processor_agent
from agents.audio_transcriber_agent import audio_transcriber_agent
from agents.video_analyzer_agent import video_analyzer_agent
from agents.image_analyzer_agent import image_analyzer_agent
from config import settings, env  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from logger import setup_logger, get_logger
from custom_exceptions import DataProcessingError, ConfigurationError

# Initialize loggers
setup_logger()
logger = get_logger()

# Try to set up ClickHouse logger, but handle connection errors
try:
    from clickhouse_logger import setup_clickhouse_logger
    ch_logger = setup_clickhouse_logger()
except Exception as e:
    logger.warning(f"ClickHouse logger not available: {e}")
    ch_logger = None

def process_data(input_data):
    """Process input data with error handling and logging."""
    try:
        if not input_data:
            raise DataProcessingError("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã")

        # Validate input data structure
        if "type" not in input_data:
            raise DataProcessingError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")

        if input_data["type"] not in ["text", "audio", "video", "image"]:
            raise DataProcessingError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {input_data['type']}")

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞: {input_data['type']}")
        if ch_logger:
            ch_logger.log_to_clickhouse('INFO', f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞: {input_data['type']}")

        # Simulate data processing
        result = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {input_data['type']}"

        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        if ch_logger:
            ch_logger.log_to_clickhouse('INFO', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã')

        return result

    except DataProcessingError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        if ch_logger:
            ch_logger.log_to_clickhouse('ERROR', f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", "DATA_ERROR")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        if ch_logger:
            ch_logger.log_to_clickhouse('ERROR', f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "UNEXPECTED_ERROR")
        return None

def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤")
        if ch_logger:
            ch_logger.log_to_clickhouse('INFO', '–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤')

        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤")
        print("=" * 50)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if not hasattr(settings, 'WEAVIATE_URL') or not settings.WEAVIATE_URL:
            raise ConfigurationError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Weaviate URL")

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   - Weaviate URL: {settings.WEAVIATE_URL}")
        print(f"   - Redis URL: {settings.REDIS_URL}")
        print(f"   - –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ: {settings.VIDEO_PATH}")
        print(f"   - –ü—É—Ç—å –∫ –∞—É–¥–∏–æ: {settings.AUDIO_PATH}")
        print(f"   - –ü—É—Ç—å –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º: {settings.TRANSCRIPTS_PATH}")

        # –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç–æ–≤
        agents = [
            input_classifier_agent,
            modality_detector_agent,
            text_processor_agent,
            audio_transcriber_agent,
            video_analyzer_agent,
            image_analyzer_agent
        ]

        # –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É
        crew = Crew(
            agents=agents,
            verbose=True
        )

        # –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        classification_task = Task(
            description="""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å.
                –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∞–≥–µ–Ω—Ç—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
            """,
            expected_output="–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
            agent=input_classifier_agent
        )

        # –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_inputs = [
            {"type": "text", "content": "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"},
            {"type": "audio", "file_path": str(settings.AUDIO_PATH / "example.mp3")},
            {"type": "video", "file_path": str(settings.VIDEO_PATH / "example.mp4")},
            {"type": "image", "file_path": str(settings.DATA_PATH / "example.jpg")}
        ]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for i, input_data in enumerate(test_inputs, 1):
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {input_data}")
            print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {input_data}")

            try:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                result = crew.execute_task(
                    task=classification_task,
                    input_data=input_data
                )

                # Process the result
                processed_result = process_data(result)

                if processed_result:
                    logger.info(f"–£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {processed_result}")
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {processed_result}")
                else:
                    logger.warning(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {i}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {e}")
                if ch_logger:
                    ch_logger.log_to_clickhouse('ERROR', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", 'TASK_ERROR')

        logger.info("–í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        print("\nüéâ –í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

    except ConfigurationError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        if ch_logger:
            ch_logger.log_to_clickhouse('ERROR', f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", 'CONFIG_ERROR')
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        if ch_logger:
            ch_logger.log_to_clickhouse('ERROR', f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", 'MAIN_ERROR')

if __name__ == "__main__":
    main()



