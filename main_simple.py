




import os
from logger import setup_logger, get_logger
from custom_exceptions import DataProcessingError, ConfigurationError

# Initialize loggers
setup_logger()
logger = get_logger()

# Try to set up ClickHouse logger, but handle connection errors
try:
    from clickhouse_logger import setup_clickhouse_logger
    ch_logger = setup_clickhouse_logger()
except Exception as e:
    logger.warning(f"ClickHouse logger not available: {e}")
    ch_logger = None

def process_data(input_data):
    """Process input data with error handling and logging."""
    try:
        if not input_data:
            raise DataProcessingError("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã")

        # Validate input data structure
        if "type" not in input_data:
            raise DataProcessingError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")

        if input_data["type"] not in ["text", "audio", "video", "image"]:
            raise DataProcessingError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {input_data['type']}")

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞: {input_data['type']}")
        if ch_logger:
            ch_logger.log_to_clickhouse('INFO', f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞: {input_data['type']}")

        # Simulate data processing
        result = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {input_data['type']}"

        logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        if ch_logger:
            ch_logger.log_to_clickhouse('INFO', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã')

        return result

    except DataProcessingError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        if ch_logger:
            ch_logger.log_to_clickhouse('ERROR', f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", "DATA_ERROR")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        if ch_logger:
            ch_logger.log_to_clickhouse('ERROR', f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "UNEXPECTED_ERROR")
        return None

def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤")
        if ch_logger:
            ch_logger.log_to_clickhouse('INFO', '–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤')

        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–æ–≤")
        print("=" * 50)

        # –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        test_inputs = [
            {"type": "text", "content": "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"},
            {"type": "audio", "file_path": "/path/to/audio.mp3"},
            {"type": "video", "file_path": "/path/to/video.mp4"},
            {"type": "image", "file_path": "/path/to/image.jpg"}
        ]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for i, input_data in enumerate(test_inputs, 1):
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {input_data}")
            print(f"\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ {i}: {input_data}")

            # Process the result
            processed_result = process_data(input_data)

            if processed_result:
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {processed_result}")
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {processed_result}")
            else:
                logger.warning(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {i}")

        logger.info("–í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        print("\nüéâ –í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
        if ch_logger:
            ch_logger.log_to_clickhouse('ERROR', f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", 'MAIN_ERROR')

if __name__ == "__main__":
    main()




